### Geolocation API
window.navigator.geolocation.getCurrentPosition(pos => {}, err => {});

getCurrentPosition(success callback, error callback)

Also you can set geolocation in sensors of console

Reset geolocation Preferences of allow/decline
Go to i on url bar and reset preferences

If we want to render location on web page we need to wait untill
geolocation gets required data

So we will class based component with state

### Class Based Component


class App extends React.Component{

    state = {};
    method = () => {

    }

    constructor(){

    }

    render() {
        return (
            <div>

            </div>
        )
    }
}

### extends React.Component
In order to use class based component, react expects that our class have methods attached to it
It needs method in the class
that we simply inherit from React.Component class

### State
JS object that contain relevant information about the component

State vs Props
State ref to data of the component which is relevant to itself
Props ref to data of the component which is given to component by its parent

Virual DOM
State and Props both re-render DOM it is changed

Updating State
setState()

Initializing state in Class Based Component

class App extends React.Component{
    state = {};
}
class App extends React.Component{
    constructor(props){
        super(props);
        this.state = {};
    }
}

### setState

In Class Based Component this.setState is used to set state
It will only replace the key-value pairs that will be overwritten
And not affect other pairs

this.setState is method inherit from React.Component don't overwrite it

this.setState({
   lat: pos.coords.latitude
})

Don't do
this.state = {
    lat: pos.coords.latitude
}
this.state.lat = pos.coords.latitude

We use this only in initialization
this.state = {}

We use setState so that it will re-render DOM
Although we can still use this.state but then it will not be really 

Don't put anything else in render instead of returning JSX
As it will called again it there is setState in the component lifecycle

### Conditional Rendering Content

render() {
    if (this.state.errmsg && !this.state.lat) {
        return <div>Error: {this.state.errmsg}</div>;
    }
    if (!this.state.errmsg && this.state.lat) {
        return <div>Latitude: {this.state.lat}</div>;
    }
    return <div>Loading...</div>;
}
Rendering different JSX dependin upon state or props

### Lifecycle

constructor
render
(It will render DOM)
componentDidMount
(It will mounted and waits for updates)
componentDidUpdate
(It will then updates the DOM accordingly)
componentWillUnmount
(It will unmount)

componentDidMount - Only once the component is mounted to DOM
componentDidUpdate - Called whenever state changes inturn call render method also
componentWillUnmount - Only once the component is unmounted from DOM

Usage:
constructor - One time setup
render - Avoid doing anything besides returning JSX
componentDidMount - To do data-loading
componentDidUpdate - More data-loading when state/props changes
componentWillUnmount - Cleanup

Other Methods:
shouldComponentUpdate
getDerivedStateFromProps
getSnapshotBeforeUpdate

### Passing state as props
<SeasonDisplay lat={this.state.lat} />;

const SeasonDisplay = props => {
    return <div>Latitude: {props.lat}</div>;
};

Since state is changed component is render
And it will also re-render children component as props

In functional based component we can still define function in them like regualr class have methods
Due to fact of First Class Function in JS (Inner functions)

To add attr that have JS in it use template literals
<i className={`icon ${icon}`}></i>

### Config Object
const seasonConfig = {
    summer: {
        text: "Let's hit the beach!",
        icon: 'sun',
    },
    winter: {
        text: "Burrr,it's chilly!",
        icon: 'snowflake',
    },
};

### Default Props
If we forget to pass message into Spinner
Getting default value of props

1. Or operator 
Using or operator
{props.message || 'Loading...'}

2. Defining props by checking
if(props)
  props = {
    message: 'Loading...',
};

3. Alternatively
Alternatively use default parameters of JS

const Spinner = (props = {message: 'Loading...'}) => {

}

However checking of props to undefined is not ideal
as props will undefined if we call function without props
but actually props will be {} when we don't pass parameters(attr)
Also we may pass some parameters(attr) and not the other

For every properties define this
One alternative is to checking or all properties and set if it is undefined
props.message = props.message || 'Loading...';

However,we cannot assign to read only property of props. 

Use defaultProps

Spinner.defaultProps = {
    message: 'Loading...'
}

### Avoiding Conditional in render

In case we want to wrap all render content
then we have to find all the return or we will wrap our own component(ie where it will be used)
Instead we will never have multiple return statement in render method

We would use helper method to get content we need and wrap that helper into one single return